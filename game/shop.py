def shop(m1, m2, m3):
    if db.System.get(name='shop_work').value == 0:
        gg = bot.edit_message_text('–í—ã –ø–æ–¥–æ—à–ª–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É –≥–¥–µ —Å—Ç–æ—è–ª –æ–¥–∏–Ω–æ–∫–∏–π –ê—à–æ—Ç. \n_-–≠–π, –ê—à–æ—Ç–∏–∫, –±—Ä–∞—Ç, –ø—Ä–æ–¥–∞–π –º–Ω–µ —á—ë-–Ω–∏–±—É–¥—å\n-–ü–∞—à—ë–ª—å –Ω–∞—Ö—É–π_', m1, m3, parse_mode = 'markdown')
        return
    else:
        pass
    text = '_–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –Ω–µ–≤–∑—Ä–∞—á–Ω–æ–º—É —Å—Ç–µ–ª–ª–∞–∂—É —Å –≤—ã—Ü–≤–µ–≤—à–∏–º –Ω–∞–≤–µ—Å–æ–º. –û—â—É—â–µ–Ω–∏–µ, —Å–ª–æ–≤–Ω–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±—Ä–æ—Å–∞–µ—Ç –≤ —è—â–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Å–µ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ –ø—É—Ç–∏ —Å—é–¥–∞. –í–ø—Ä–æ—á–µ–º, –≤–æ–Ω —Ç–æ—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø–ª–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ._'
    counteat = 0
    countequip = 0
    countitem = 0
    shop = db.Shop.select().where(db.Shop.count>0)
    for counts in shop:
        if counts.type == '–ï–¥–∞':
            counteat += 1
        elif counts.type == '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞' or counts.type == '–ó–µ–ª—å–µ':
            countequip += 1
        elif counts.type == '–ë—Ä–æ–Ω—è':
            countitem += 1
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    if counteat > 0:
        markup.add(InlineKeyboardButton('üçï –ü–∏—â–∞', callback_data="shop_eat"))
    else:
        markup.add(InlineKeyboardButton('üçï –ü–∏—â–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ)', callback_data="return"))
    if countequip > 0:
        markup.add(InlineKeyboardButton('üß¢ –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞', callback_data="shop_equip"))
    else:
        markup.add(InlineKeyboardButton('üß¢ –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ)', callback_data="return"))
    if countitem > 0:
        markup.add(InlineKeyboardButton('üõ° –ë—Ä–æ–Ω—è', callback_data="shop_item"))
    else:
        markup.add(InlineKeyboardButton('üõ° –ë—Ä–æ–Ω—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ)', callback_data="return"))
    usr = db.Users.get(user_id=m1)
    if usr.location == '–ì–æ—Ä–æ–¥':
        markup.add(InlineKeyboardButton('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data="nav_city_centr"))
    elif usr.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥':
        markup.add(InlineKeyboardButton('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data="nav_bigcity_centr"))
    gg = bot.edit_message_text(text, m1, m3, reply_markup=markup, parse_mode = 'markdown')


@bot.callback_query_handler(func=lambda call: call.data.startswith('return'))
def ret(call): 
    return

@bot.callback_query_handler(func=lambda call: call.data.startswith('shop_'))
def _shop(call): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    armorOld = ['–ö–æ–∂–∞–Ω—ã–π —à–ª–µ–º', '–ö–æ–∂–∞–Ω—ã–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–ö–æ–∂–∞–Ω—ã–µ —à—Ç–∞–Ω—ã', '–ö–æ–∂–∞–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏']
    sh = call.data.split('_')
    select = sh[1]
    user = db.Users.get(user_id=call.from_user.id)
    if select == 'close':
        user.position = '–ü–ª–æ—â–∞–¥—å'
        user.save()
        gg = bot.edit_message_text('–í—ã –∑–∞–∫—Ä—ã–ª–∏ –º–∞–≥–∞–∑–∏–Ω.', call.message.chat.id, call.message.message_id)
        return
    elif select == 'eat':
        Type = '–ï–¥–∞'
    elif select == 'equip':
        Type = '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞'
    elif select == 'item':
        Type = '–ë—Ä–æ–Ω—è'
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏: \n"
    shop = db.Shop.select().where(db.Shop.type==Type, db.Shop.count > 0)
    for item in shop:
        if Type == '–ë—Ä–æ–Ω—è' and user.location == '–ì–æ—Ä–æ–¥' and item.name in armorOld:
            name, size, bonus = db.items(item.name, check=True)
            text += "\nx{} {} | {}üí∞".format(item.count, name, item.price)
            markup.add(InlineKeyboardButton('{}'.format(name), callback_data="buy_{}".format(item.id)))
        elif Type == '–ë—Ä–æ–Ω—è' and user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥':
            name, size, bonus = db.items(item.name, check=True)
            text += "\nx{} {} | {}üí∞".format(item.count, name, item.price)
            markup.add(InlineKeyboardButton('{}'.format(name), callback_data="buy_{}".format(item.id)))
        elif Type != '–ë—Ä–æ–Ω—è':
            name, size, bonus = db.items(item.name, check=True)
            text += "\nx{} {} | {}üí∞".format(item.count, name, item.price)
            markup.add(InlineKeyboardButton('{}'.format(name), callback_data="buy_{}".format(item.id)))
    markup.add(InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data="backtoshop"))
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode = 'markdown')


@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def buy(call): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    sh = call.data.split('_')
    select = sh[1]
    item = db.Shop.get(id=select)
    if item.count <= 0:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –∫–æ–Ω—á–∏–ª—Å—è."
        gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='markdown')
        return
    name, size, bonus = db.items(item.name, check=True)
    user = db.Users.get(user_id=call.from_user.id)
    if user.location == '–ì–æ—Ä–æ–¥' or user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥':
        pass
    else:
        gg = bot.edit_message_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ –≥–æ—Ä–æ–¥–∞", call.message.chat.id, call.message.message_id)
        return
    if user.money >= item.price:
        if item.name == '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫':
            check = db.Inventory.get(idplayer=user.id, name='–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫')
            if check:
                text = "_–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞ –Ω–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–Ω–µ—Å—Ç–∏ –±–æ–ª—å—à–µ!_"
                gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='markdown')
                return
        success = db.addItem(item.name, user)
        db.specialItems(name, user)
        if success == True:
            item.count = item.count - 1
            item.save()
            user.money = user.money - item.price
            user.save()
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ: {}".format(item.name))                
            bot.send_message(tradeChat, "–ò–≥—Ä–æ–∫ {} –∫—É–ø–∏–ª {} –∑–∞ {}üí∞".format(user.username, item.name, item.price))
            return
        else:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–µ—Ç –º–µ—Å—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫–µ")          
    else:
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")                



@bot.callback_query_handler(func=lambda call: call.data.startswith('donateshop'))
def donateshop(call):
    user = db.Users.get(user_id=call.from_user.id)
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('+5üì¶', callback_data="dshopbuy_1"), InlineKeyboardButton('+1000üçó', callback_data="dshopbuy_2"))
    markup.add(InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É', callback_data="dshopbuy_3"))
    markup.add(InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º', callback_data="dshopbuy_4"))
    markup.add(InlineKeyboardButton('üè∫–ê–º—Ñ–æ—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏', callback_data="dshopbuy_5"))
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω üíé. –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã.\n–£ –≤–∞—Å {}üíé\n\n".format(user.almaz)
    text += "+5üì¶(25üíé). –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ 5üì¶"
    text += "\n+1000üçó(5üíé). –ü–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≥–æ–ª–æ–¥–æ–º. –í —Å–ª—É—á–∞–µ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–¥—ã - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–±–∏–≤–∞–µ—Ç—Å—è"
    text += "\n–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏(50üíé). –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É"
    text += "\n–°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞(20üíé). –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç (–∏–ª–∏ –Ω–µ—Ç)"
    text += "\nüè∫–ê–º—Ñ–æ—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏(5üíé). –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ª—é–±—É—é –∏–∑ —Ç—Ä—ë—Ö –≤–µ—â–µ–π –Ω–∞ –≤—ã–±–æ—Ä (—Å–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏, –µ–¥–∞, –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è)"
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('dshopbuy_'))
def dshopbuy(call):
    sh = call.data.split('_')
    select = sh[1]
    user = db.Users.get(user_id=call.from_user.id)
    if select == '1':
        if user.almaz >= 25:
            if db.Inventory.get(name='–î–æ–Ω–∞—Ç –∏–Ω–≤', idplayer=user.id):
                text = "–î–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ª–∏—à—å –æ–¥–∏–Ω —Ä–∞–∑."
            else:
                user.almaz -= 25
                item = db.Inventory(name='–î–æ–Ω–∞—Ç –∏–Ω–≤', type='–î–æ–Ω–∞—Ç', size=0, bonus=0, active=0, idplayer=user.id)
                item.save()
                user.inventorySizeMax += 5
                user.save()
                text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ +5üì¶"
        else:
            text = "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíé"
    elif select == '2':
        if user.almaz >= 5:
            user.almaz -= 5
            user.eat += 1000
            user.save()
            text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ +1000üçó"
        else:
            text = "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíé"
    elif select == '3':
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        if user.almaz >= 50:
            user.almaz -= 50
            user.save()
            text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ +1000üçó"
            markup.add(InlineKeyboardButton('üåã–ì—Ä—è–∑–Ω–æ–µ –Ω–µ–±–æ', callback_data="donateSelectGroup_1"))
            markup.add(InlineKeyboardButton('üóº–í–∞–≤–∏–ª–æ–Ω', callback_data="donateSelectGroup_2"))
            markup.add(InlineKeyboardButton('‚öîÔ∏è–ù–µ–±–µ—Å–Ω—ã–µ —Ä—ã—Ü–∞—Ä–∏', callback_data="donateSelectGroup_3"))
            markup.add(InlineKeyboardButton('üí†–•—Ä–∞–Ω–∏—Ç–µ–ª–∏', callback_data="donateSelectGroup_4"))
        else:
            text = "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíé"
    elif select == '4':
        if user.almaz >= 20:
            gg = bot.send_message(call.message.chat.id, "–ù–∞–∑–æ–≤–∏ —Å–≤–æ—ë –∏–º—è, –ø—É—Ç–Ω–∏–∫.")
            bot.register_next_step_handler(gg, reg_nick)
            text = "–ù–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–∞..."
            user.almaz -= 20
            user.save()
        else:
            text = "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíé"
    elif select == '5':
        if user.almaz >= 5:
            user.almaz -= 5
            user.save()
            success = db.addItem('–ê–º—Ñ–æ—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏', user)
            text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ üè∫–ê–º—Ñ–æ—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏"
        else:
            text = "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíé"
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('donateSelectGroup_'))
def donateSelectGroup(call):
    sh = call.data.split('_')
    f = sh[1]
    user = db.Users.get(user_id=call.from_user.id)
    frak = db.Fraks.get(name=user.frak)
    frak.players -= 1
    frak.save()
    if user.frak == '–•—Ä–∞–Ω–∏—Ç–µ–ª–∏':
        bot.kick_chat_member(-1001320424099, m.from_user.id)
    elif user.frak == '–ù–µ–±–µ—Å–Ω—ã–µ —Ä—ã—Ü–∞—Ä–∏':
        bot.kick_chat_member(-1001467052649, m.from_user.id)
    elif user.frak == '–ì—Ä—è–∑–Ω–æ–µ –Ω–µ–±–æ':
        bot.kick_chat_member(-1001121150202, m.from_user.id)
    elif user.frak == '–í–∞–≤–∏–ª–æ–Ω':
        bot.kick_chat_member(-1001336335908, m.from_user.id)
    if f == '1':
        link = 'https://t.me/joinchat/Kd-6VBY61CSikVObkJdJJQ'
        user.frak = "–ì—Ä—è–∑–Ω–æ–µ –Ω–µ–±–æ"
        frak = db.Fraks.get(name=user.frak)
        frak.players += 1
    elif f == '2':
        link = 'https://t.me/joinchat/Kd-6VBY5L9HenYxFd_PSOw'
        user.frak = "–í–∞–≤–∏–ª–æ–Ω"
        frak = db.Fraks.get(name=user.frak)
        frak.players += 1
    elif f == '3':
        link = 'https://t.me/joinchat/Kd-6VFdxcmk2qB352-qD9A'
        user.frak = "–ù–µ–±–µ—Å–Ω—ã–µ —Ä—ã—Ü–∞—Ä–∏"
        frak = db.Fraks.get(name=user.frak)
        frak.players += 1
    elif f == '4':
        link = 'https://t.me/joinchat/Kd-6VBmrXcTK0Lt9lMDmEg'
        user.frak = "–•—Ä–∞–Ω–∏—Ç–µ–ª–∏"
        frak = db.Fraks.get(name=user.frak)
        frak.players += 1
    frak.save()
    user.save()


@bot.callback_query_handler(func=lambda call: call.data.startswith('shopsell'))
def shopsell(call):
    user = db.Users.get(user_id=call.from_user.id)
    if user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥' and user.position == '–ü–ª–æ—â–∞–¥—å':
        pass
    else:
        gg = bot.edit_message_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ –ø–ª–æ—â–∞–¥–∏", call.message.chat.id, call.message.message_id)
        return
    inventory = db.Inventory.select().where(db.Inventory.idplayer==user.id, db.Inventory.active==1)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:\n\n"
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    passed = 0
    for item in inventory:
        checkShop = db.Shop.select().where(db.Shop.name==item.name).order_by(db.Shop.id.desc()).limit(1)
        if checkShop:
            for z in checkShop:
                price = int(z.price / 3)
                if z.name == '–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è' or z.name == '–ö–æ–ª—å—Ü–æ –∂–∏–≤–æ—Å—Ç–∏' or z.name == '–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏':
                    price = 250
                name, size, bonus = db.items(item.name, check=True)
                text += "{} - {}üí∞\n".format(name, price)
                markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–∞—Ç—å {}'.format(name), callback_data="lombardsell_{}_{}".format(item.id, price)))
            passed = 1
    if passed == 0:
        text = "_–ù—É –∏ —á—Ç–æ —ç—Ç–æ —Ç—ã –º–Ω–µ –ø—Ä–∏–Ω—ë—Å? –ï—â–µ –±—ã –∫–æ–Ω—Å–µ—Ä–≤–Ω—ã—Ö –±–∞–Ω–æ–∫ –Ω–∞—Å–æ–±–∏—Ä–∞–ª! –ú–Ω–µ —Ç–∞–∫–æ–π —Ö–ª–∞–º –Ω–µ –Ω—É–∂–µ–Ω!_"
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown', reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data.startswith('backtoshop'))
def backtoshop(call):
    m1 = call.from_user.id
    m2 = call.message.chat.id
    m3 = call.message.message_id
    shop(m1, m2, m3)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lombardsell_'))
def lombardsell(call):
    sh = call.data.split('_')
    itemId = sh[1]
    item = db.Inventory.get(id=itemId)
    if item.active != 1:
        text = "–û—à–∏–±–∫–∞. –ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown')
        return
    else:
        Type, size, bonus = db.items(item.name, check=False)
        user = db.Users.get(user_id=call.from_user.id)
        item.active = 0
        item.save()
        price = sh[2]
        pricesell = int(price) * 3
        user.money += int(price)
        user.save()
        checkInSell = db.Shop.select().where(db.Shop.name==item.name).order_by(db.Shop.count.desc()).limit(1)
        for z in checkInSell:
            z.count += 1
            z.save()
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ {} –∑–∞ {}üí∞".format(item.name, price))                
        bot.send_message(tradeChat, "[–õ–û–ú–ë–ê–†–î] –ò–≥—Ä–æ–∫ {} –ø—Ä–æ–¥–∞–ª {} –∑–∞ {}üí∞".format(user.username, item.name, price))
        inventory = db.Inventory.select().where(db.Inventory.idplayer==user.id, db.Inventory.active==1)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:\n\n"
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        passed = 0
        for item in inventory:
            checkShop = db.Shop.select().where(db.Shop.name==item.name).order_by(db.Shop.id.desc()).limit(1)
            if checkShop:
                for z in checkShop:
                    price = int(z.price / 3)
                    if z.name == '–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è' or z.name == '–ö–æ–ª—å—Ü–æ –∂–∏–≤–æ—Å—Ç–∏' or z.name == '–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏':
                        price = 250
                    name, size, bonus = db.items(item.name, check=True)
                    text += "{} - {}üí∞\n".format(name, price)
                    markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–∞—Ç—å {}'.format(name), callback_data="lombardsell_{}_{}".format(item.id, price)))
                passed = 1
        if passed == 0:
            text = "–ü—Ä–µ–¥–º–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å"
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown', reply_markup=markup)


###############
#   –°–ö–£–ü–©–ò–ö   #
###############
@bot.callback_query_handler(func=lambda call: call.data.startswith('bomjsell'))
def bomjsell(call):
    user = db.Users.get(user_id=call.from_user.id)
    if user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥' and user.position == '–ü–ª–æ—â–∞–¥—å':
        pass
    else:
        gg = bot.edit_message_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ –ø–ª–æ—â–∞–¥–∏", call.message.chat.id, call.message.message_id)
        return
    inventory = db.Inventory.select().where(db.Inventory.idplayer==user.id, db.Inventory.active==1, db.Inventory.type=='–•–ª–∞–º')
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:\n\n"
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    passed = 0
    for item in inventory:
        if item.name == '–ü–µ—Ä–æ —è—Å—Ç—Ä–µ–±–∞':
            pass
        else:
            passed = 1
            name, size, bonus = db.items(item.name, check=True)
            text += "{}\n".format(name)
            markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–∞—Ç—å {}'.format(name), callback_data="bomj_sell_{}".format(item.id)))
    if passed == 0:
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–∞–º –Ω–µ—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å")                
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('bomj_sell_'))
def bomj_sell(call):
    sh = call.data.split('_')
    itemId = sh[2]
    item = db.Inventory.get(id=itemId)
    if item.active != 1:
        text = "–û—à–∏–±–∫–∞. –ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown')
        return
    else:
        Type, size, bonus = db.items(item.name, check=False)
        user = db.Users.get(user_id=call.from_user.id)
        item.active = 0
        item.save()
        price = random.randint(20, 55)
        user.money += int(price)
        user.save()
        text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ {} –∑–∞ {}üí∞".format(item.name, price)
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data="nav_bigcity_centr"))
        bot.send_message(tradeChat, "[–°–ö–£–ü–©–ò–ö] –ò–≥—Ä–æ–∫ {} –ø—Ä–æ–¥–∞–ª —Å–∫—É–ø—â–∏–∫—É {} –∑–∞ {}üí∞".format(user.username, item.name, price))
    gg = bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown', reply_markup=markup)
